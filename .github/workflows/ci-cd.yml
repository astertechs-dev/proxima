name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
  ECS_CLUSTER_STAGING: proxima-staging
  ECS_CLUSTER_PRODUCTION: proxima-production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Frontend Tests
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # Backend Tests - User Service
    - name: Test User Service
      working-directory: ./backend/user-service
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        go mod download
        go test -v ./...

    # Backend Tests - Job Service
    - name: Test Job Service
      working-directory: ./backend/job-service
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        go mod download
        go test -v ./...

    # Backend Tests - Match Service
    - name: Test Match Service
      working-directory: ./backend/match-service
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        MONGODB_URL: mongodb://test_user:test_password@localhost:27017/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        pip install -r requirements.txt
        python -m pytest tests/ -v

    # Backend Tests - AI Service
    - name: Test AI Service
      working-directory: ./backend/ai-service
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        MONGODB_URL: mongodb://test_user:test_password@localhost:27017/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        pip install -r requirements.txt
        python -m pytest tests/ -v

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [frontend, user-service, job-service, match-service, ai-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || format('./backend/{0}', matrix.service) }}
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/proxima-${{ matrix.service }}:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/proxima-${{ matrix.service }}:${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS Staging
      run: |
        # Update ECS services with new image tags
        services=("frontend" "user-service" "job-service" "match-service" "ai-service")
        
        for service in "${services[@]}"; do
          echo "Updating $service in staging..."
          
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition "proxima-staging-$service" \
            --query 'taskDefinition' \
            --output json)
          
          # Update image URI in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$ECR_REGISTRY/proxima-$service:$GITHUB_SHA" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition \
            --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update ECS service
          aws ecs update-service \
            --cluster $ECS_CLUSTER_STAGING \
            --service "proxima-staging-$service" \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
          
          echo "Updated $service with task definition: $NEW_TASK_DEF_ARN"
        done

    - name: Wait for deployment to complete
      run: |
        services=("frontend" "user-service" "job-service" "match-service" "ai-service")
        
        for service in "${services[@]}"; do
          echo "Waiting for $service deployment to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_STAGING \
            --services "proxima-staging-$service"
          echo "$service deployment completed successfully"
        done

    - name: Run health checks
      run: |
        # Wait a bit for services to be fully ready
        sleep 30
        
        # Get ALB DNS name from AWS
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names "proxima-staging-alb" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Health check endpoints
        endpoints=("health" "api/v1/users/health" "api/v1/jobs/health" "api/v1/match/health" "api/v1/ai/health")
        
        for endpoint in "${endpoints[@]}"; do
          echo "Checking health of $endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://$ALB_DNS/$endpoint" || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ $endpoint is healthy"
          else
            echo "❌ $endpoint returned status: $response"
            exit 1
          fi
        done

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS Production
      run: |
        # Update ECS services with new image tags
        services=("frontend" "user-service" "job-service" "match-service" "ai-service")
        
        for service in "${services[@]}"; do
          echo "Updating $service in production..."
          
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition "proxima-production-$service" \
            --query 'taskDefinition' \
            --output json)
          
          # Update image URI in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$ECR_REGISTRY/proxima-$service:$GITHUB_SHA" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition \
            --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update ECS service
          aws ecs update-service \
            --cluster $ECS_CLUSTER_PRODUCTION \
            --service "proxima-production-$service" \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
          
          echo "Updated $service with task definition: $NEW_TASK_DEF_ARN"
        done

    - name: Wait for deployment to complete
      run: |
        services=("frontend" "user-service" "job-service" "match-service" "ai-service")
        
        for service in "${services[@]}"; do
          echo "Waiting for $service deployment to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_PRODUCTION \
            --services "proxima-production-$service"
          echo "$service deployment completed successfully"
        done

    - name: Run health checks
      run: |
        # Wait a bit for services to be fully ready
        sleep 30
        
        # Get ALB DNS name from AWS
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names "proxima-production-alb" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Health check endpoints
        endpoints=("health" "api/v1/users/health" "api/v1/jobs/health" "api/v1/match/health" "api/v1/ai/health")
        
        for endpoint in "${endpoints[@]}"; do
          echo "Checking health of $endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://$ALB_DNS/$endpoint" || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ $endpoint is healthy"
          else
            echo "❌ $endpoint returned status: $response"
            exit 1
          fi
        done

    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Production deployment completed successfully!"
        echo "Application is now live at: https://proxima.example.com"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
